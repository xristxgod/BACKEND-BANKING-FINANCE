from typing import Union, Dict
import decimal

from .node import NodeTron
from src.utils.types import TronAccountAddress, Amount
from config import decimals

def get_energy(address: str, energy: int) -> int:
    """If the user has enough energy."""
    total_energy = tron_station.get_account_energy(address=address)["totalEnergy"]
    if int(total_energy) <= 0:
        return energy
    elif energy - int(total_energy) <= 0:
        return 0
    else:
        return energy - int(total_energy)

class TronStation(NodeTron):

    defaultTotalEnergyLimit = 50_000_000_000

    def get_chain_parameters_by_name(self, name: str) -> int:
        parameters = self.node.get_chain_parameters()
        for parameter in parameters:
            if parameter["key"] == name:
                return parameter["value"]
        else:
            return 0

    def calculate_frozen_energy(self, address: TronAccountAddress, amount: Amount) -> Union[decimal.Decimal, int]:
        """
        Returns the amount of energy generated by staking TRX
        :param address: Address of account
        :param amount: Amount of TRX in sun
        """
        resource = self.node.get_account_resource(addr=address)
        total_energy_weight = resource["TotalEnergyWeight"] if "TotalEnergyWeight" in resource else 0
        total_energy_limit = self.defaultTotalEnergyLimit
        param_value = self.get_chain_parameters_by_name("getTotalEnergyLimit")
        if param_value != 0:
            total_energy_limit = param_value
        if float(total_energy_weight) == 0:
            return decimals.create_decimal(0)
        amount = (amount * total_energy_limit) / total_energy_weight
        return decimals.create_decimal(amount)

    def calculate_burn_energy(self, amount: Amount) -> Union[float, int]:
        """
        Returns the amount of energy generated by burning TRX
        :param amount: Amount of TRX in sun
        :return:
        """
        energy_fee = self.get_chain_parameters_by_name(name="getEnergyFee")
        if float(energy_fee) == 0:
            return decimals.create_decimal(0)
        fee = (amount / energy_fee) * 1_000_000
        return decimals.create_decimal(fee)

    def calculate_frozen_bandwidth(self, address: TronAccountAddress, amount: Amount) -> Union[decimal.Decimal, int]:
        """
        Returns the amount of bandwidth generated by staking TRX
        :param amount: 	Amount of TRX
        :param address: Address of account
        """
        resource = self.node.get_account_resource(addr=address)
        total_energy_limit = resource["TotalNetLimit"] if "TotalNetLimit" in resource else 0
        total_energy_weight = resource["TotalNetWeight"] if "TotalNetWeight" in resource else 0
        if amount > 0 and total_energy_weight > 0:
            amount = (amount * total_energy_limit) / total_energy_weight
            return decimals.create_decimal(amount)
        return decimals.create_decimal(0)

    def get_account_bandwidth(self, address: TronAccountAddress) -> Dict:
        """
        Returns bandwidth data from account.
        :param address: Address of account
        """
        account_resources = self.node.get_account_resource(address)
        free_bandwidth = account_resources["freeNetLimit"] if "freeNetLimit" in account_resources else 0
        free_bandwidth_used = account_resources["freeNetUsed"] if "freeNetUsed" in account_resources else 0
        total_bandwidth = free_bandwidth - free_bandwidth_used
        return {
            "freeBandwidth": free_bandwidth,
            "freeBandwidthUsed": free_bandwidth_used,
            "totalBandwidth": total_bandwidth
        }

    def get_account_energy(self, address: TronAccountAddress) -> Dict:
        """
        Returns energy data from account.
        :param address: Address of account
        """
        account_resources = self.node.get_account_resource(address)
        energy = account_resources["EnergyLimit"] if "EnergyLimit" in account_resources else 0
        energy_used = account_resources["EnergyUsed"] if "EnergyUsed" in account_resources else 0
        total_energy = energy - energy_used if energy > 0 and energy_used > 0 else 0
        return {
            "energy": energy,
            "energyUsed": energy_used,
            "totalEnergy": total_energy
        }

tron_station = TronStation()